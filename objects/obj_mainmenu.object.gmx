<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Menu Start
game_ini();
scale = 1920 / 1280;
if (os_type == os_android)
{
    scale=1920 / 1196;
}

//Button Params
button_c[0] = c_black;
button_c[1] = make_color_rgb(48, 48, 48);
button_w = 224;
button_h = 96;
button_spacing = 32;
button_y = (800 / 2) + 272;
button_y_max = 16;
button_maxnumber = 24;

for (var i = 10; i &gt; -1; i--)
{
    button_y_add[i] = 0;
}


//Fade in / Fade Out Transition effect for menu folders. 
trans_alpha = 1.0;
trans_menu = false;

//Menu
menu_type = 0; //0 = Buttons, 1 = List
mneu_type_next = 0;
list_w = 3; //Number of instances shown
cur_select = 0; //Current menu button. (index)
selection_confirmed = -1;
trigger = false; //For action.
pre_menu = "";
cur_menu = "";
next_menu = "";
cur_line = 0;
list_scroll = 0;
list_scroll_band = 0;

mb_left_event_x = mouse_x;
mb_left_event_y = mouse_y;
mouse_dragging = false;

//mouse_tapping = true;
list_scroll_previous = 0;

list = ds_list_create();
mainmenu_goto("");
io_clear();

//Mobile Specific Start
alarm[11] = 1;
if (os_type == os_android)
{
    global.res_x = display_get_width();
    global.res_y = display_get_height();
    global.aspect_ratio = (global.res_x/global.res_y);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Mobile Specific Settings
if (os_type == os_android)
{
    global.res_x = display_get_width();
    global.res_y = display_get_height();
    global.aspect_ratio = (global.res_x/global.res_y);
}
config_load();
config_apply();
io_clear();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Input Trigger
trigger = false;
io_clear();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Delta FPS
global.delta_fps = (room_speed / 1000000.0) * delta_time;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Graphical Changes

//Button Y Changes
var vel, xx;
vel = 3.75 * (delta_time/1000000);
//vel = (3.75 / room_speed) * global.delta_fps;
if (cur_select &gt;= 0)
{
    if (button_y_add[cur_select] &lt; button_y_max)
    {
        button_y_add[cur_select] = clamp(0.0, (button_y_add[cur_select] + vel), 1.0);
    }
}

for (var a = ds_list_size(list) - 1; a &gt; -1; a--)
{
    if (a != cur_select)
    {
        if (button_y_add[a] &gt; 0.0)
        {
            button_y_add[a] = clamp(0.0, (button_y_add[a] - vel), button_y_max);
        }
    }
}

//Scrolling
var band;
band = (0.2 * (room_speed / global.delta_fps));

if (band &gt; 1.0)
{
    list_scroll += (list_scroll_band - list_scroll) / band;
}
else
{
    list_scroll = list_scroll_band;
}

cur_line = ceil(-list_scroll_band / ((button_w) + (button_spacing)));


//Borders
if (list_scroll &gt; 0.0 &amp;&amp; cur_line &lt;= 0)
{
    list_scroll_band = 0.0;
}

if (cur_line &gt; ds_list_size(list) - list_w)
{
    list_scroll_band = -(ds_list_size(list) - list_w) * (button_w + button_spacing);
}

//Transitions
if (trans_menu)
{
    trans_alpha -= (3.0 / room_speed) * global.delta_fps;
    if (trans_alpha &lt;= 0)
    {
        trans_menu = false;
        pre_menu = cur_menu;
        cur_menu = next_menu;
        cur_line = 0;
        list_scroll_band = 0;
        list_scroll = 0;
        cur_select = 0;
        mainmenu_goto(cur_menu);
        menu_type = menu_type_next;
    }
}
else
{
    trans_alpha += (3.0 / room_speed) * global.delta_fps;
}

trans_alpha = clamp(trans_alpha, 0.0, 1.0);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Mouse Input
var xx, inregion, s;
s = (view_wview / 1280);
if (menu_type == 0)
{
    //Perform Actions on Current Instance
    for (var a = 0; a &lt; ds_list_size(list); a++)
    {
        xx = (1280 / 2) - 192 + (button_w * a) + (button_spacing * a) + list_scroll;
        inregion = (mouse_x &gt; xx * s and mouse_x &lt; (xx + button_w) * s &amp;&amp; mouse_y &gt; (button_y - button_y_add[a]) * s &amp;&amp; mouse_y &lt; (button_y + button_h) * s);

        if (inregion)
        {
        cur_select = a;
        }
        
        if (mouse_check_button_released(mb_left))
        {
            if (inregion)
            {
                if (selection_confirmed == a &amp;&amp; !mouse_dragging)
                {
                    mainmenu_action(ds_list_find_value(list, selection_confirmed));
                }
                else
                {
                    selection_confirmed = a;
                }
            }
        }
    }
    if (mouse_wheel_down())
    {
        list_scroll_band -= ((button_w) + (button_spacing));
    }
    if (mouse_wheel_up())
    {
        list_scroll_band += ((button_w) + (button_spacing));
    }
}

if (menu_type == 1)
{
    for (var i = 0; i &lt; ds_list_size(list); i += 1)
    {
        xx = (1280 / 2) + 256 + 32;
        inregion = mouse_x &gt; xx * s and mouse_x &lt; (1280) * s and mouse_y &gt; (192 + ((i - 0.5) * 64)) * s and mouse_y &lt; (192 + ((i + 0.5) * 64)) * s;
        if (inregion)
        {
            if (mouse_check_button_pressed(mb_left))
            {
                if (cur_select != i)
                {
                    cur_select = i;
                }
                else
                {
                    mainmenu_action(ds_list_find_value(list, i));
                    var txt, data;
                    txt = ds_list_find_value(list, i + cur_line);
                    data = mainmenu_data(txt);
                    if (data != "")
                    {
                        if (mouse_x &gt; ((1152 - 32 - 16) * s) &amp;&amp; mouse_x &lt; ((1152 - 32 + 16) * s))
                        {
                            mainmenu_data_previous(txt);
                        }
                        if (mouse_x &gt; ((1280 - 16 - 16) * s) &amp;&amp; mouse_x &lt; ((1280) * s))
                        {
                            mainmenu_data_next(txt);
                        }
                    }
                }
            }
        }
    }
    if (mouse_wheel_down())
    {
        mainmenu_sel_next();
    }
    if (mouse_wheel_up())
    {
        mainmenu_sel_previous();
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Touchscreen Input
if (mouse_check_button_pressed(mb_left))
{
    mb_left_event_x = mouse_x;
    mb_left_event_y = mouse_y;
    list_scroll_previous = list_scroll;
}
if (mouse_check_button_released(mb_left))
{
    mouse_dragging = false;
}

if (mouse_check_button(mb_left))
{
    var xmin, xmax, s;
    xmin = (1280 / 2) - 192 + (button_w * 0) + (button_spacing * 0) - 64;
    xmax = (1280 / 2) - 192 + (button_w * 3) + (button_spacing * 3) + 64;
    s = (view_wview / 1280);
    
    var inregion;
    inregion = (mouse_y &gt; (button_y - button_y_max) * s &amp;&amp; mouse_y &lt; (button_y + button_h) * s &amp;&amp; mouse_x &gt; xmin * s &amp;&amp; mouse_x &lt; xmax * s);
    
    if (inregion)
    {
        if (abs(mouse_y - mb_left_event_y) &gt; 2.0 || abs(mouse_x - mb_left_event_x) &gt; 2.0)
        {
            mouse_dragging = true;
        }
    }
}

if (mouse_dragging)
{
    list_scroll_band = list_scroll_previous + (mb_left_event_x - mouse_x);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Keyboard Input
if (menu_type == 0)
{
    if (keyboard_check(vk_left))
    {
        mainmenu_sel_previous();
    }
    if (keyboard_check(vk_right))
    {
        mainmenu_sel_next();
    }
}
if (menu_type == 1)
{
    if (keyboard_check(vk_up))
    {
        mainmenu_sel_previous();
    }
    if (keyboard_check(vk_down))
    {
        mainmenu_sel_next();
    }
    if (keyboard_check(vk_left))
    {
        mainmenu_data_previous(ds_list_find_value(list, cur_select + cur_line));
    }
    if (keyboard_check(vk_right))
    {
        mainmenu_data_next(ds_list_find_value(list, cur_select + cur_line));
    }
}
if (keyboard_check_pressed(vk_escape) || keyboard_check_pressed(vk_backspace) || keyboard_check_pressed(ord('X')))
{
    mainmenu_action("back");
}

if (keyboard_check_pressed(vk_space) || keyboard_check_pressed(vk_enter) || keyboard_check_pressed(ord('Z')))
{
    mainmenu_action(ds_list_find_value(list, cur_select));
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Controller based Input
if (gamepad_is_supported())
{
    //gamepad_detect();

    if (global.gamepad_connected[0])
    {
        var leftstick_x, leftstick_y, moving, deadzone, angle;
        leftstick_x = gamepad_axis_value(0, gp_axislh);
        leftstick_y = gamepad_axis_value(0, gp_axislv);
        deadzone = 0.5;
        moving = (abs(leftstick_x) &gt; deadzone || abs(leftstick_y) &gt; deadzone);

        if (moving)
        {
            angle = angle_8dir(point_direction(0, 0, leftstick_x, leftstick_y));
            if (menu_type == 0)
            {
                if (angle == 0)
                {
                    mainmenu_sel_next();
                }
                if (angle == 180)
                {
                    mainmenu_sel_previous();
                }
            }
            if (menu_type == 1)
            {
                if (angle == 270)
                {
                    mainmenu_sel_next();
                }
                if (angle == 90)
                {
                    mainmenu_sel_previous();
                }
                if (angle == 0)
                {
                    mainmenu_data_next(ds_list_find_value(list, cur_select + cur_line));
                }
                if (angle == 180)
                {
                    mainmenu_data_previous(ds_list_find_value(list, cur_select + cur_line));
                }
            }
        }
        if (gamepad_button_check_pressed(0, gp_face1))
        {
            mainmenu_action(ds_list_find_value(list, cur_select + cur_line));
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Backgrounds
//draw_background_
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Button based Menu
//Logo
draw_sprite_ext(spr_ui_logo, 0, ((1280 / 2) - 256) * scale, (800 / 2) * scale, 0.5 * scale, 0.5 * scale, 0, c_white, 0.8);

draw_set_font(fon_main);

if (menu_type == 0)
{
    //Variable Ini
    var xx, xmin, xmax, xminf, xmaxf, ww, aa;
    xmin = (1280 / 2) - 192 + (button_w * 0) + (button_spacing * 0);
    xmax = (1280 / 2) - 192 + (button_w * 2) + (button_spacing * 2);
    xminf = (1280 / 2) - 192 + (button_w * -1) + (button_spacing * -1);
    xmaxf = (1280 / 2) - 192 + (button_w * 3) + (button_spacing * 3);
    ww = (button_w) + (button_spacing);
    aa = 1.0;


    draw_set_halign(fa_right);
    //Draw Menu Buttons
    for (var a = 0; a &lt; ds_list_size(list); a++)
    {
        xx = (1280 / 2) - 192 + (button_w * a) + (button_spacing * a) + list_scroll;

        if (xx &lt; xmin)
        {
            aa = (xx - xminf) / ww;
        }
        else
        if (xx &gt; xmax)
        {
            aa = (xmaxf - xx) / ww;
        }
        else
        {
            aa = 1.0;
        }

        aa *= trans_alpha;
        aa = clamp(aa, 0.0, 1.0);
        if (aa &gt; 0.0)
        {
            draw_set_alpha(0.2 * aa);
            draw_rectangle_color(xx * scale, (button_y - (button_y_add[a] * button_y_max)) * scale, (xx + button_w) * scale, (button_y + button_h) * scale, button_c[1], button_c[1], button_c[0], button_c[0], false);
            draw_set_alpha(aa);
            draw_text_color((xx + button_w - 4) * scale, (button_y + button_h - 48) * scale, ds_list_find_value(list, a), c_white, c_white, c_white, c_white, 0.75 * aa);
            draw_set_alpha(1);
        }
    }

    //Arrows
    draw_set_alpha(0.15);
    xx = (1280 / 2) - 192 + (button_w * 3) + (button_spacing * 3.5);
    draw_sprite_ext(spr_mainmenu_arrow, 0, xx * scale, (button_y + (button_h / 2)) * scale, (3 / 4) * scale, (3 / 4) * scale, 0, c_white, 0.15 * trans_alpha);
    xx = (1280 / 2) - 192 + (button_spacing * -1.5);
    draw_sprite_ext(spr_mainmenu_arrow, 0, xx * scale, (button_y + (button_h / 2)) * scale, (-3 / 4) * scale, (3 / 4) * scale, 0, c_white, 0.15 * trans_alpha);
}

draw_set_halign(fa_left);
draw_set_valign(fa_top);
draw_set_alpha(1);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///List based Menu
if (menu_type == 1)
{
    //Ini
    var aa, x1, x2, y1, y2, txt, data;
    aa = 0.12;
    aa *= trans_alpha;
    aa = clamp(aa, 0.0, 1.0);
    
    x1 = (1280 / 2) + 256;
    y1 = 0;

    x2 = 1280;
    y2 = 800;
    
    //Draw Back
    draw_set_alpha(aa);
    draw_rectangle_color(x1 * scale, y1 * scale, x2 * scale, y2 * scale, button_c[1], button_c[1], button_c[1], button_c[1], 0);
    
    //Draw Title
    draw_set_halign(fa_left);
    draw_set_valign(fa_middle);
    x1 = (1280 / 2) + 256 + 32;
    y1 = 128 - 12;
    draw_set_font(fon_main36);
    draw_text_color(x1 * scale, y1 * scale, cur_menu, c_white, c_white, c_white, c_white, trans_alpha);
    draw_set_font(fon_main);
    
    y1 = 128 + 64;
    var size;
    size = ds_list_size(list);
    if (size &gt; 7)
    {
        size = 7;
    }
    //Draw Each instance of the list. 
    for (var i = 0; i &lt; size; i += 1)
    {
        txt = ds_list_find_value(list, i + cur_line);
        data = mainmenu_data(txt);
        if (data != "")
        {
            draw_set_halign(fa_center);
            draw_text_color((1200 - 8) * scale, (y1 + (i * 64)) * scale, data, c_white, c_white, c_white, c_white, trans_alpha);
            draw_text_color((1152 - 32) * scale, (y1 + (i * 64)) * scale, "&lt;", c_white, c_white, c_white, c_white, trans_alpha);
            draw_text_color((1280 - 16) * scale, (y1 + (i * 64)) * scale, "&gt;", c_white, c_white, c_white, c_white, trans_alpha);    
            draw_set_halign(fa_left)      
        }
        if (i == cur_select)
        {
            draw_set_alpha(0.1*trans_alpha);
            draw_rectangle_color((896 + (384 - (384 * button_y_add[i]))) * scale, (y1 + ((i - 0.5) * 64)) * scale, 1280 * scale, (y1 + ((i + 0.5) * 64)) * scale, button_c[1], button_c[1], button_c[1], button_c[1], 0);
            draw_set_font(fon_main20);
            draw_set_alpha(trans_alpha);
            draw_text_ext_color((x1 - 4) * scale, (736) * scale, mainmenu_description(txt), 32 * scale, 342 * scale, c_white, c_white, c_white, c_white, trans_alpha);
        }
        draw_set_font(fon_main);
        draw_text_color((x1) * scale, (y1 + (i * 64)) * scale, txt, c_white, c_white, c_white, c_white, trans_alpha);

    }
}

draw_set_alpha(1);
draw_set_halign(fa_left);
draw_set_valign(fa_top);
draw_set_font(fon_main);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="122">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scale=1920/window_get_width()
if (os_type != os_android or os_type != os_ios)
{
    if window_get_fullscreen()
    {
        window_set_fullscreen(false);
        window_set_rectangle(0, 0, window_get_width(), window_get_height());
        for (i = 0;i&lt;3;i+=1)
        {
        view_wview[i] = window_get_width()
        view_hview[i] = window_get_height()
        view_wport[i] = window_get_width()
        view_hport[i] = window_get_height()
        }
    }
    else
    {
        window_set_fullscreen(true);
        window_set_rectangle(0, 0, display_get_width(), display_get_height());
        for (i = 0;i&lt;3;i+=1)
        {
        view_wview[i] = window_get_width()
        view_hview[i] = window_get_height()
        view_wport[i] = window_get_width()
        view_hport[i] = window_get_height()
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
