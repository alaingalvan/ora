<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_orb_mask</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//game_ini();
//Orb Engine 4
//By Alain Galvan
//Last Revision: 06/15/12
////////////////////////////////////////////////////////////////////////////////////////
//Initial Code
//This has been set so that one can easily modify the physics that influence orb while at
//the same time keep individual ai easily modifiable in the event off the need of
//ai or other entities.
////////////////////////////////////////////////////////////////////////////////////////
//Arrow Controls
////////////////////////////////////////////////////////////////////////////////////////
left = keyboard_check(global.left) || keyboard_check(ord('A'));
right = keyboard_check(global.right);
up = keyboard_check(global.up);
down = keyboard_check(global.down);
////////////////////////////////////////////////////////////////////////////////////////
//Physics
////////////////////////////////////////////////////////////////////////////////////////
//Constants
hpmax = 3; //Max HP
airgravspd = 1; //Air's Gravity Acc
watergravspd = 0.25; //Water's Gravity Acc
maxjump = 2; //Max Number of Double Jumps
jumpspd = 16; //Jump Speed
airfric = 0.5; //Air Friction
groundfric = 1; //Ground Friction
maxspd = 12; //Max Horizontal Speed
z = -64;

//Dynamic Vars
gravspd = 1; //Current Grav Speed
waterstage = 0;
slopedir = 0;
flash = 1;
hspd = 0;
vspd = 0;
accspd = 1;
dir = 1;
inair = 0;
hold = 0;
jump = 0;
jumpstatus = 0;
inwater = 0;
hdir = 0;
hp = hpmax;
Speed = 0;
Direction = 0;
dirprevious = Direction;
hue = floor(random(255));
gem = 0;
movetimerr = 0;
movetimerl = 0;
noclip = false;

//Load Game
if (global.loadgame = true) {
    x = global.xx;
    y = global.yy;
}
if (global.loadgame = false) {
    global.xx = x;
    global.yy = y;
    gamesave_save();
}

//Constants
block = obj_block_par;
bounce = obj_bounce_par;
water = obj_water_par;
ladder = obj_ladder_par;

global.loadgame = false;
touch_control();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_create(x,y,obj_orb_death)
obj_orb_blur.hue=hue
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Mesurements
Direction = point_direction(x,y,xprevious,yprevious);
Speed = point_distance(x,y,xprevious,yprevious);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>dirprevious = Direction;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Orb Engine 4
//By Alain Galvan
//Last Revision: 10/26/12
////////////////////////////////////////////////////////////////////////////////////////
//Implement: 
//Allow the 
//New Motion engine that supports:
//Slopes
//Higher max Hspeed
//Screen Zooms out and averages on bouncing at high frequencies. 
//Implement Box Physics
//Fullscreen Fix
//Options Implemtation
//Adjust tutorial image to scale with screen.
//Add more contrast to menu buttons.
//Make it so that blocks no longer kill you if falling, only when you're crushed. 
//Make title screen for level so player knows where they're at. 
//Level 3, make it so that you have a button that can add boxes to the level. 
////////////////////////////////////////////////////////////////////////////////////////
//Loop Code
//Orb Engine Revision 4 
////////////////////////////////////////////////////////////////////////////////////////
//Movement &amp; Friction
////////////////////////////////////////////////////////////////////////////////////////
//PC Controls 
left = keyboard_check(global.left) || keyboard_check(ord('A'));;
 right = keyboard_check(global.right);
 up = keyboard_check(global.up);
 down = keyboard_check(global.down);
//Gamepad Controls

if os_type = os_windows or os_type = os_macosx {
    if joystick_exists(1) {
        switch (joystick_direction(1)) {
            case vk_numpad1:
                left = true;
                if inwater = 1 {
                    down = true
                };
                break;
            case vk_numpad2:
                if inwater = 1 {
                    down = true
                };
                break;
            case vk_numpad3:
                right = true;
                if inwater = 1 {
                    down = true
                };
                break;
            case vk_numpad4:
                left = true;
                break;
            case vk_numpad6:
                right = true;
                break;
            case vk_numpad7:
                left = true;
                if inwater = 1 {
                    up = true;
                }
                break;
            case vk_numpad8:
                if inwater = 1 {
                    up = true;
                }
                break;
            case vk_numpad9:
                right = true;
                if (inwater) {
                    up = true;
                }
                break;
        }
        if (joystick_check_button(1, 1)) {
            up = true;
        }
        if (joystick_check_button(1, 7)) {
        if (instance_exists(obj_orb2))
        {
            x = obj_orb2.x;
            y = obj_orb2.y;
            }
        }
    }
}
if (!noclip) {
    ora_move(up,left,down,right);
}
else {
    noclip_move(up,left,down,right);
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Ghosts
image_blend = make_color_hsv(hue, 255, 255)
 hue += 1
if hue &gt; 255 {
    hue = 0
}

if (dirprevious - Direction) &gt;= 180 { dirprevious -= 360}
if (dirprevious - Direction) &lt;= -180 {dirprevious += 360}

//Alpha of first ghost
imgalpha = .375

//Average of change in direction.
dir = (dirprevious + Direction) / 2

//temp vars for script.
xx = xprevious
yy = yprevious

//This is where the ghosts are started to be created
//Repeat as many times as there is space between the current and previous position
repeat(Speed / 5 ) {
    with(instance_create(xx, yy, obj_orb_blur)) {
        image_alpha = other.imgalpha image_blend = other.image_blend
    }

    xx += lengthdir_x(5, dir)
    yy += lengthdir_y(5, dir)
    //Both these move where the ghosts are created towards the right spot a bit
    dir -= (dirprevious - Direction) / Speed
    //This increases the dir variable at a rate that makes the curve correctly
    imgalpha += .025 / (Speed / 5)
    //Increases the alpha, so it creates a smoothly fading line,
    //rather than one that fades in blocks
    //This should be equal to what the ghost is decreasing by divided by the ratio
  }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Orb Engine 4
//By Alain Galvan
//Last Revision: 06/15/12
////////////////////////////////////////////////////////////////////////////////////////
//Draw Code
//This is the script that is in charge of controlling all Graphics of Orb. THis script is 
//programmed such that it could work in both a 2D environment or a 3D environment. 
////////////////////////////////////////////////////////////////////////////////////////
{
    d3d_set_lighting(false)
    d3d_set_hidden(false);
    draw_set_blend_mode(bm_add)
    draw_set_color(image_blend)
    d3d_draw_floor(xprevious - 128, yprevious - 128, z, xprevious + 128, yprevious + 128, z, global.tex_ora_largeglow, 1, 1);

    d3d_draw_floor(xprevious - 32, yprevious - 32, z, xprevious + 32, yprevious + 32, z, global.tex_ora_smallglow, 1, 1);
    draw_set_color(c_white)
    d3d_draw_floor(xprevious - 32, yprevious - 32, z, xprevious + 32, yprevious + 32, z, global.tex_ora_mediumglow, 1, 1);
    draw_set_blend_mode(bm_normal)

    draw_set_color(c_white)
    d3d_set_hidden(true);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>24,24</point>
    <point>24,24</point>
  </PhysicsShapePoints>
</object>
